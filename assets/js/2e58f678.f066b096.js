"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[22],{4805:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Security/setupauthprovider","title":"(Coming Soon) Set Up Auth Provider on Separate Server","description":"The best practice is to set up your auth provider on a separate server (or even cluster of servers).","source":"@site/docs/05-Security/setupauthprovider.md","sourceDirName":"05-Security","slug":"/Security/setupauthprovider","permalink":"/cashu-mint-docs/docs/Security/setupauthprovider","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Monitoring Your Mint","permalink":"/cashu-mint-docs/docs/Security/monitoring"}}');var r=n(4848),i=n(8453);const s={sidebar_position:5},a="(Coming Soon) Set Up Auth Provider on Separate Server",c={},l=[{value:"Keycloak Setup",id:"keycloak-setup",level:2},{value:"Keycloak Setup",id:"keycloak-setup-1",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"coming-soon-set-up-auth-provider-on-separate-server",children:"(Coming Soon) Set Up Auth Provider on Separate Server"})}),"\n",(0,r.jsx)(t.p,{children:"The best practice is to set up your auth provider on a separate server (or even cluster of servers)."}),"\n",(0,r.jsx)(t.p,{children:"The OIDC service must be setup as follows:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"No client secret:\xa0The OIDC service MUST NOT use a client secret."}),"\n",(0,r.jsx)(t.li,{children:"Authorization code flow:\xa0The OIDC service MUST enable the\xa0authorization code flow\xa0with PKCE for public clients, so that an authorization code can be exchanged for an access token and a refresh token."}),"\n",(0,r.jsx)(t.li,{children:"Signature algorithm:\xa0The OIDC service MUST support at least one of the two asymmetric JWS signature algorithms for access token and ID token signatures:\xa0ES256\xa0and\xa0RS256."}),"\n",(0,r.jsx)(t.li,{children:"Wallet redirect URLs:\xa0To support the OpenID Connect Authorization Code flow, the OIDC service MUST allow redirect URLs that correspond to the wallets it wants to support. You can find a list of common redirect URLs for well-known Cashu wallets\xa0here."}),"\n",(0,r.jsxs)(t.li,{children:["Localhost redirect URL:\xa0The OIDC service MUST also allow redirects to the URL\xa0",(0,r.jsx)(t.a,{href:"http://localhost:33388/callback",children:"http://localhost:33388/callback"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Authentication flows:\xa0Although, strictly speaking, this NUT does not restrict the OpenID Connect grant types that can be used to obtain a CAT, it is recommended to enable at least the\xa0authorization_code\xa0(Authorization Code) flow and the\xa0urn:ietf:params:oauth:grant-type",":device_code","\xa0(Device Code) flow in the\xa0grant_types_supported\xa0field of the\xa0openid_discovery\xa0configuration. The\xa0password\xa0(Resource Owner Password Credentials, ROPC) flow SHOULD NOT be used as it requires handling the user's credentials in the wallet application."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"keycloak-setup",children:"Keycloak Setup"}),"\n",(0,r.jsx)(t.p,{children:"Set up .env file with passwords, etc."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'POSTGRES_DB="keycloakdb"\nPOSTGRES_USER="keycloakadmin"\nPOSTGRES_PASSWORD=****\nKEYCLOAK_ADMIN="admin"\nKEYCLOAK_ADMIN_PASSWORD=*****\nKC_HOSTNAME="hostname"\n#KC_HOSTNAME=localhost\nKC_HOSTNAME_PORT=8080\nKC_HOSTNAME_URL="<url>"\n'})}),"\n",(0,r.jsx)(t.p,{children:"Edit the provided docker-compose.yml for any additional setup you may need (add vars to .env file), such as:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'KC_HOSTNAME_ADMIN_URL=""\nKC_HOSTNAME_URL=""\nKC_CORS: "true"\nKC_CORS_ORIGINS: "*"\nKC_CORS_ALLOW_METHODS: "GET,POST,OPTIONS,PUT,DELETE"\n'})}),"\n",(0,r.jsx)(t.p,{children:"From the keycloak directory:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"sudo docker-compose up -d\ndocker ps\n"})}),"\n",(0,r.jsx)(t.h2,{id:"keycloak-setup-1",children:"Keycloak Setup"}),"\n",(0,r.jsx)(t.p,{children:"For KeyCloak:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Keycloak - Create realm for mint. e.g., nutshell"}),"\n",(0,r.jsxs)(t.li,{children:["Keycloak Steps to Make Public, Enable Authorization Code Flow with PKCE (Minimal Configuration)\nUnder your realm\na. Go to the Keycloak Admin Console \u2192 Clients \u2192 select (or create) your client.\nb. Under the Settings tab:","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Client Authentication=No, or Access Type: set to Public (this automatically ensures no client secret is used)."}),"\n",(0,r.jsx)(t.li,{children:"Standard Flow Enabled: ON (this is the authorization code flow)."}),"\n",(0,r.jsx)(t.li,{children:"Implicit Flow Enabled: OFF (unless you explicitly need the Implicit Flow)."}),"\n",(0,r.jsx)(t.li,{children:"Direct Access Grants Enabled: OFF (unless you want users to authenticate via resource owner password credentials)."}),"\n",(0,r.jsx)(t.li,{children:"Service Accounts Enabled: OFF (this is for confidential clients needing a service account)."}),"\n",(0,r.jsx)(t.li,{children:"Device Authetication Grant : On\nc. In newer Keycloak versions, under Advanced Settings (or similar), find Proof Key for Code Exchange or PKCE Policy:"}),"\n",(0,r.jsx)(t.li,{children:"Set PKCE to Required and RS256."}),"\n",(0,r.jsx)(t.li,{children:"\u201cRS256\u201d is the recommended secure hashing method.\nd. Click Save."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var o=n(6540);const r={},i=o.createContext(r);function s(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);