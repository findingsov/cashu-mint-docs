"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[22],{4805:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Security/setupauthprovider","title":"Set Up Auth and Auth Provider","description":"Configure Mint for Auth","source":"@site/docs/05-Security/setupauthprovider.md","sourceDirName":"05-Security","slug":"/Security/setupauthprovider","permalink":"/cashu-mint-docs/docs/Security/setupauthprovider","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Monitoring Your Mint","permalink":"/cashu-mint-docs/docs/Security/monitoring"}}');var r=t(4848),o=t(8453);const s={sidebar_position:5},l="Set Up Auth and Auth Provider",c={},a=[{value:"Configure Mint for Auth",id:"configure-mint-for-auth",level:2},{value:"Auth Provider Setup",id:"auth-provider-setup",level:2},{value:"Keycloak Setup",id:"keycloak-setup",level:2},{value:"Set up and Deploy",id:"set-up-and-deploy",level:3},{value:"Keycloak Admin Setup",id:"keycloak-admin-setup",level:2},{value:"Realm and Client Setup",id:"realm-and-client-setup",level:3},{value:"User Setup",id:"user-setup",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"set-up-auth-and-auth-provider",children:"Set Up Auth and Auth Provider"})}),"\n",(0,r.jsx)(n.h2,{id:"configure-mint-for-auth",children:"Configure Mint for Auth"}),"\n",(0,r.jsx)(n.p,{children:"Make sure your mint configuration is set up for auth. In your .env or config.toml file, you need to make sure the URL for discovery is set correclty for your realm name."}),"\n",(0,r.jsx)(n.p,{children:"config.toml"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'# [auth]\n# openid_discovery = "http://127.0.0.1:8080/realms/cdk/.well-known/openid-configuration"\n# openid_client_id = "cashu-client"\n# mint_max_bat=50\n# enabled_mint=true\n# enabled_melt=true\n# enabled_swap=true\n# enabled_check_mint_quote=true\n# enabled_check_melt_quote=true\n# enabled_restore=true\n'})}),"\n",(0,r.jsx)(n.p,{children:"nutshell .env file"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# Turn on authentication\n# MINT_REQUIRE_AUTH=TRUE\n# OpenID Connect discovery URL of the authentication provider\n# MINT_AUTH_OICD_DISCOVERY_URL=http://localhost:8080/realms/nutshell/.well-known/openid-configuration\n# MINT_AUTH_OICD_CLIENT_ID=cashu-client\n# Number of authentication attempts allowed per minute per user\n# MINT_AUTH_RATE_LIMIT_PER_MINUTE=5\n# Maximum number of blind auth tokens per authentication request\n# MINT_AUTH_MAX_BLIND_TOKENS=100\n"})}),"\n",(0,r.jsx)(n.h2,{id:"auth-provider-setup",children:"Auth Provider Setup"}),"\n",(0,r.jsx)(n.p,{children:"The best practice is to set up your auth provider on a separate server (or even cluster of servers)."}),"\n",(0,r.jsx)(n.p,{children:"The OIDC service must be setup as follows:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No client secret:\xa0The OIDC service MUST NOT use a client secret."}),"\n",(0,r.jsx)(n.li,{children:"Authorization code flow:\xa0The OIDC service MUST enable the\xa0authorization code flow\xa0with PKCE for public clients, so that an authorization code can be exchanged for an access token and a refresh token."}),"\n",(0,r.jsx)(n.li,{children:"Signature algorithm:\xa0The OIDC service MUST support at least one of the two asymmetric JWS signature algorithms for access token and ID token signatures:\xa0ES256\xa0and\xa0RS256."}),"\n",(0,r.jsx)(n.li,{children:"Wallet redirect URLs:\xa0To support the OpenID Connect Authorization Code flow, the OIDC service MUST allow redirect URLs that correspond to the wallets it wants to support. You can find a list of common redirect URLs for well-known Cashu wallets\xa0here."}),"\n",(0,r.jsxs)(n.li,{children:["Localhost redirect URL:\xa0The OIDC service MUST also allow redirects to the URL\xa0",(0,r.jsx)(n.a,{href:"http://localhost:33388/callback",children:"http://localhost:33388/callback"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Authentication flows:\xa0Although, strictly speaking, this NUT does not restrict the OpenID Connect grant types that can be used to obtain a CAT, it is recommended to enable at least the\xa0authorization_code\xa0(Authorization Code) flow and the\xa0urn:ietf:params:oauth:grant-type",":device_code","\xa0(Device Code) flow in the\xa0grant_types_supported\xa0field of the\xa0openid_discovery\xa0configuration. The\xa0password\xa0(Resource Owner Password Credentials, ROPC) flow SHOULD NOT be used as it requires handling the user's credentials in the wallet application."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"keycloak-setup",children:"Keycloak Setup"}),"\n",(0,r.jsx)(n.h3,{id:"set-up-and-deploy",children:"Set up and Deploy"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"For the docker-compose.yml file and .env file in your keycloak folder."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Set up .env file with passwords, etc."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'POSTGRES_DB="keycloakdb"\nPOSTGRES_USER="keycloakadmin"\nPOSTGRES_PASSWORD=****\nKEYCLOAK_ADMIN="admin"\nKEYCLOAK_ADMIN_PASSWORD=*****\nKC_HOSTNAME="hostname"\n#KC_HOSTNAME=localhost\nKC_HOSTNAME_PORT=8080\nKC_HOSTNAME_URL="<url>"\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Edit the provided docker-compose.yml for any additional setup you may need (add vars to .env file), such as:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'KC_HOSTNAME_ADMIN_URL=""\nKC_HOSTNAME_URL=""\nKC_CORS: "true"\nKC_CORS_ORIGINS: "*"\nKC_CORS_ALLOW_METHODS: "GET,POST,OPTIONS,PUT,DELETE"\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"From the keycloak directory:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"sudo docker-compose up -d\ndocker ps\n"})}),"\n",(0,r.jsx)(n.p,{children:"To stop:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"sudo docker-compose down\n"})}),"\n",(0,r.jsx)(n.h2,{id:"keycloak-admin-setup",children:"Keycloak Admin Setup"}),"\n",(0,r.jsx)(n.h3,{id:"realm-and-client-setup",children:"Realm and Client Setup"}),"\n",(0,r.jsx)(n.p,{children:"Access the Keycloak Admin Console:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Click the Keycloak drop-down in upper left, and Create Realm for mint. e.g., nutshell, cdk"}),"\n",(0,r.jsx)(n.li,{children:"Select Clients and set Client type=OpenID Connect and Client ID = cashu-client"}),"\n",(0,r.jsx)(n.li,{children:"Set up:"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Client Authentication= OFF, or Access Type: set to Public (this automatically ensures no client secret is used)."}),"\n",(0,r.jsx)(n.li,{children:"Standard Flow Enabled: ON (this is the authorization code flow)."}),"\n",(0,r.jsx)(n.li,{children:"Implicit Flow Enabled: OFF (unless you explicitly need the Implicit Flow)."}),"\n",(0,r.jsx)(n.li,{children:"Direct Access Grants Enabled: OFF (unless you want users to authenticate via resource owner password credentials)."}),"\n",(0,r.jsx)(n.li,{children:"Service Accounts Enabled: OFF (this is for confidential clients needing a service account)."}),"\n",(0,r.jsx)(n.li,{children:"Device Authetication Grant : ON"}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["For Web-based clients, provide proper root, home, and redirect URLs. Set a redirect URL of ",(0,r.jsx)(n.a,{href:"http://localhost:33388/callback",children:"http://localhost:33388/callback"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"user-setup",children:"User Setup"}),"\n",(0,r.jsx)(n.p,{children:"Your user needs to login in order to authenticate, so you need to define users and their initial passwords."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);